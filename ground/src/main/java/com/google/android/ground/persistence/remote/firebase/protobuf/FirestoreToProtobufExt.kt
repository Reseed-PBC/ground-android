/*
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.android.ground.persistence.remote.firebase.protobuf

import com.google.firebase.firestore.DocumentSnapshot
import com.google.protobuf.GeneratedMessageLite
import java.lang.reflect.Field
import kotlin.reflect.KClass
import kotlin.reflect.KFunction
import kotlin.reflect.full.declaredFunctions
import kotlin.reflect.full.isSubclassOf
import kotlin.reflect.jvm.isAccessible
import kotlin.reflect.jvm.kotlinFunction
import timber.log.Timber

typealias MessageBuilder = GeneratedMessageLite.Builder<*, *>

/**
 * Returns a new instance of the specified [Message] populated with the document's id and data.
 *
 * Corresponding proto fields are matched based on their fields names. Several special rules are
 * also applied:
 * * Invalid or unrecognized are ignored.
 * * When populating `map<String, Message>`, the converter attempts to set the map key in the "id"
 *   field of the `Message` map values.
 *
 * This implementation is tightly bound to the implementation of code generated by
 * protobuf-kotlin-lite. Future versions of the library may require changes to this util.
 */
fun <T : Message> DocumentSnapshot.toMessage(messageType: KClass<T>): T =
  data.toMessage(messageType)

// .apply { set(ID_FIELD_NAME, id) }

@Suppress("UNCHECKED_CAST")
private fun <T : Message> FirestoreMap?.toMessage(messageType: KClass<T>): T {
  val newBuilderFun =
    messageType.java.getDeclaredMethod("newBuilder").kotlinFunction
      ?: throw UnsupportedOperationException("newBuilder not() found")
  val builder = newBuilderFun.call() as MessageBuilder
  this?.forEach { (k, v) -> builder.set(k, v) }
  return builder.build() as T
}

private fun FirestoreMap.toMessageMap(mapValueType: KClass<*>): MessageMap {
  val mapField = MessageMap.emptyMapField<Any, Any>().mutableCopy()
  forEach { (key: FirestoreValue, value: FirestoreValue) ->
    mapField[key] = value.toMessageValue(mapValueType)
    //    if (mapField[key] is Message) {
    //      (mapField[key] as Message).set(ID_FIELD_NAME, key)
    //    }
  }
  mapField.makeImmutable()
  return mapField
}

private fun <T : Message> KClass<T>.newInstance(): T =
  constructors.first().apply { isAccessible = true }.call()

private fun MessageBuilder.set(key: FirestoreKey, value: FirestoreValue) {
  try {
    val fieldName: MessageFieldName = key
    val setter = getSetterByFieldName(fieldName)
    val fieldValue = value.toMessageValue(this, fieldName)
    setter.call(this, fieldValue)
  } catch (e: Throwable) {
    Timber.e(e, "Skipping incompatible Firestore value. ${javaClass}: $key=$value")
  }
}

private fun MessageBuilder.getFieldTypeByName(fieldName: String): KClass<*> =
  javaClass.getDeclaredMethod("get${fieldName.toSentenceCase()}").returnType?.kotlin
    ?: throw UnsupportedOperationException("Getter not found for field $fieldName")

private fun MessageBuilder.getSetterByFieldName(fieldName: String): KFunction<*> =
  this::class.declaredFunctions.find { it.name == "set${fieldName.toSentenceCase()}" }
    ?: throw UnsupportedOperationException("Setter not found for field $fieldName")

private fun MessageBuilder.getMapValueType(key: FirestoreKey): KClass<*> {
  val mapValueGetterName = key.toMessageMapGetterMethodName()
  val mapValueGetterMethod = javaClass.declaredMethods.find { it.name == mapValueGetterName }
  return mapValueGetterMethod?.returnType?.kotlin
    ?: throw NoSuchMethodError("$mapValueGetterName method")
}

private fun FirestoreKey.toMessageMapGetterMethodName() = "get${toSentenceCase()}OrDefault"

private fun String.toSentenceCase() = replaceFirstChar {
  if (it.isLowerCase()) it.uppercaseChar() else it
}

private fun Message.setPrivate(field: Field, value: Any?) {
  field.isAccessible = true
  field.set(this, value)
  field.isAccessible = false
}

@Suppress("UNCHECKED_CAST")
private fun FirestoreValue.toMessageValue(
  message: MessageBuilder,
  fieldName: String,
): MessageValue {
  val fieldType = message.getFieldTypeByName(fieldName)
  return if (fieldType.isSubclassOf(Map::class)) {
    (this as FirestoreMap).toMessageMap(message.getMapValueType(fieldName))
  } else {
    toMessageValue(fieldType)
  }
}

@Suppress("UNCHECKED_CAST")
private fun FirestoreValue.toMessageValue(targetType: KClass<*>): MessageValue =
  if (targetType == String::class) {
    this as String
  } else if (targetType.isSubclassOf(GeneratedMessageLite::class)) {
    (this as FirestoreMap).toMessage(targetType as KClass<GeneratedMessageLite<*, *>>)
  } else {
    throw UnsupportedOperationException("Unsupported message field type $targetType")
    // TODO(#1748): Handle arrays, GeoPoint, int, and other types.
  }
